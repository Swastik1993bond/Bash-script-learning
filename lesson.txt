##############################################					##############################################


							Functions



##############################################					##############################################

						Define once, call it anywhere
	Syntax: method 1

	<function name> () {
	        <commands>
	}
	
Alternatively same function can be written as : <function name> () { <commands> ; }

	Syntax: method 2

	function <function name> () {
	        <commands>
	}

Alternatively same function can be wrutten as : function <function name> () { <commands> ; }

points : When writing in one line, the commands must end with a semicolon (;), whether in bash scripts or the terminal directly



code 1:


#!/bin/bash
# Defining functions
myname() {
	   whoami
	}

# Invoking functions
myname



# alternate 

myname () { echo $whoami ; }

myname

Pipelining :
A pipeline is a sequence of one or more commands separated by one of the control operators ' | ' or ' |& '. The output of each command in the pipeline is connected via a pipe to the input of the next command. That is, each command reads the previous command's output.

netstat:
In computing, netstat is a command-line network utility that displays network connections for Transmission Control Protocol, routing tables, and a number of network interface and network protocol statistics.

Parameters ==>
-t	Display only TCP connections.		
-n	Displays active TCP connections, however, addresses and port numbers are expressed numerically and no attempt is made to determine names.
-u	Display only UDP connections.
-p 	protocol	Shows connections for the protocol specified by protocol. In this case, protocol can be tcp, udp, tcpv6, or udpv6. If this parameter is used with -s to display statistics by protocol, protocol can be tcp, udp, icmp, ip, tcpv6, udpv6, icmpv6, or ipv6.


code 2: check open_ports

#!/bin/bash
# Defining functions

check_ports () {
	    netstat -tunlap | grep LISTEN | awk '{print $4"   "$7}'

	}

# Invoking functions

check_ports

code 3: check if a port is open

netstat -tunlap | grep LISTEN | grep :80


check_ports () {
	    netstat -tunlap | grep LISTEN | grep :80 > /dev/null
		if [[ $? -eq 0 ]]
			then
			echo "port is occupied"	
		else
		echo "port is free"

	}
